// Generated by CoffeeScript 1.7.1
var Game, GameEngine, InputController, PhysicalObject, game, level,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

InputController = (function() {
  function InputController() {
    var c, _i;
    document.onkeydown = this.on_keydown.bind(this);
    document.onkeyup = this.on_keyup.bind(this);
    this.key_bindings = {};
    this.keys_down = {};
    this.keys_pressed = {};
    this.keys_released = [];
    this.keys = {
      TAB: 9,
      ENTER: 13,
      ESC: 27,
      SPACE: 32,
      LEFT_ARROW: 37,
      UP_ARROW: 38,
      RIGHT_ARROW: 39,
      DOWN_ARROW: 40
    };
    for (c = _i = 65; _i <= 90; c = ++_i) {
      this.keys[String.fromCharCode(c)] = c;
    }
  }

  InputController.prototype.event_code_for_event = function(e) {
    if (e.type === 'keydown' || e.type === 'keyup') {
      return e.keyCode;
    }
  };

  InputController.prototype.bind_key_to_action = function(key_name, action) {
    var key;
    key = this.keys[key_name];
    return this.key_bindings[key] = action;
  };

  InputController.prototype.on_keydown = function(e) {
    var action;
    action = this.key_bindings[this.event_code_for_event(e)];
    if (!action) {
      return;
    }
    if (!this.keys_down[action]) {
      this.keys_pressed[action] = true;
    }
    this.keys_down[action] = true;
    e.stopPropagation();
    return e.preventDefault();
  };

  InputController.prototype.on_keyup = function(e) {
    var action;
    action = this.key_bindings[this.event_code_for_event(e)];
    if (!action) {
      return;
    }
    this.keys_released.push(action);
    e.stopPropagation();
    return e.preventDefault();
  };

  InputController.prototype.clear_pressed_keys = function() {
    var action, _i, _len, _ref;
    _ref = this.keys_released;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      action = _ref[_i];
      this.keys_down[action] = false;
    }
    this.keys_released = [];
    return this.keys_pressed = {};
  };

  InputController.prototype.is_pressed = function(action) {
    return this.keys_pressed[action];
  };

  InputController.prototype.is_down = function(action) {
    return this.keys_down[action];
  };

  InputController.prototype.is_released = function(action) {
    return __indexOf.call(this.keys_released, action) >= 0;
  };

  return InputController;

})();

GameEngine = (function() {
  function GameEngine(delay) {
    if (delay == null) {
      delay = 20;
    }
    this.input = new InputController();
    this.last_dt = this.delay = delay;
    this.request_animation_frame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
      return window.setTimeout((function() {
        return callback(1000 / 60);
      }), 1000 / 60);
    };
  }

  GameEngine.prototype.update = function(dt) {};

  GameEngine.prototype.render = function() {};

  GameEngine.prototype.run = function() {
    var raf, s;
    if (this.running) {
      return;
    }
    this.running = true;
    raf = this.request_animation_frame;
    s = (function(_this) {
      return function() {
        if (!_this.running) {
          return;
        }
        _this.step();
        return raf(s);
      };
    })(this);
    this.last_step = Date.now();
    return raf(s);
  };

  GameEngine.prototype.stop = function() {
    return this.running = false;
  };

  GameEngine.prototype.step = function() {
    var dt, now;
    now = Date.now();
    dt = now - this.last_step;
    this.last_step = now;
    if (this.last_dt < this.delay) {
      this.last_dt += dt;
      return;
    } else {
      this.last_dt = 0;
      this.update(dt);
      this.render();
    }
    return this.input.clear_pressed_keys();
  };

  return GameEngine;

})();

PhysicalObject = (function() {
  function PhysicalObject() {
    this.gravity = 0.3;
    this.velocity = {
      X: 0,
      Y: 0
    };
    this.position = {
      X: 10,
      Y: 10
    };
    this.is_on_ground = false;
  }

  PhysicalObject.prototype.hit_the_ceiling = function() {
    return this.position.Y <= 0;
  };

  PhysicalObject.prototype.update_position = function(dt) {
    if (this.is_on_ground) {
      this.velocity.Y = 0.0;
    }
    this.position.Y += this.velocity.Y;
    this.velocity.Y += this.gravity;
    if (this.hit_the_ceiling()) {
      this.position.Y = 0;
      return this.velocity.Y = this.gravity;
    }
  };

  PhysicalObject.prototype.start_jump = function() {
    if (this.is_on_ground) {
      this.velocity.Y = -3.0;
      return this.is_on_ground = false;
    }
  };

  PhysicalObject.prototype.end_jump = function() {
    var max;
    max = -0.5;
    if (this.velocity.Y < max) {
      return this.velocity.Y = max;
    }
  };

  return PhysicalObject;

})();

Game = (function(_super) {
  __extends(Game, _super);

  function Game(delay, level) {
    Game.__super__.constructor.apply(this, arguments);
    this.input.bind_key_to_action('SPACE', 'jump');
    this.input.bind_key_to_action('UP_ARROW', 'jump');
    this.canvas = document.getElementById("canvas");
    this.tilemap = this.parse_level(level);
    this.player = new PhysicalObject();
  }

  Game.prototype.parse_level = function(string) {
    var i, max_length, pixel_map, row, _i, _j, _len;
    max_length = 0;
    pixel_map = string.split("\n").map(function(row) {
      if (row.length > max_length) {
        max_length = row.length;
      }
      return row.split("");
    });
    for (_i = 0, _len = pixel_map.length; _i < _len; _i++) {
      row = pixel_map[_i];
      for (i = _j = 0; 0 <= max_length ? _j <= max_length : _j >= max_length; i = 0 <= max_length ? ++_j : --_j) {
        if (row[i] === void 0) {
          row[i] = " ";
        }
      }
    }
    return pixel_map;
  };

  Game.prototype.move_camera = function(dir) {
    switch (dir) {
      case "right":
        return this.tilemap.map(function(a) {
          return a.push(a.shift());
        });
      case "left":
        return this.tilemap.map(function(a) {
          return a.unshift(a.pop());
        });
    }
  };

  Game.prototype.update = function(dt) {
    var new_y, old_y, y, _i;
    if (this.input.is_pressed('jump')) {
      this.player.start_jump();
    }
    if (this.input.is_released('jump')) {
      this.player.end_jump();
    }
    old_y = Math.round(this.player.position.Y);
    this.player.update_position(dt);
    new_y = Math.min(Math.round(this.player.position.Y), this.tilemap.length - 1);
    this.move_camera("right");
    if (new_y > old_y) {
      for (y = _i = new_y; new_y <= old_y ? _i <= old_y : _i >= old_y; y = new_y <= old_y ? ++_i : --_i) {
        if (this.tilemap[y][this.player.position.X] !== " ") {
          this.player.is_on_ground = true;
          this.player.position.Y = y - 1;
        }
      }
    }
    if (new_y === old_y && this.player.is_on_ground) {
      if (this.tilemap[old_y + 1][this.player.position.X] === " ") {
        return this.player.is_on_ground = false;
      }
    }
  };

  Game.prototype.render = function() {
    var buffer;
    buffer = this.tilemap.map(function(ar) {
      return ar.slice();
    });
    buffer[Math.round(this.player.position.Y)][this.player.position.X] = "@";
    return this.canvas.innerHTML = buffer.map(function(el) {
      return el.join("");
    }).join("\n");
  };

  return Game;

})(GameEngine);

level = "\n\n\n\n\n\n                                                                            xxxxxxxxxxxxxxxx xxxxxxxxxx  xxxxxxxxxxx    xxxxxxxxxx     xxxxx\n\n\n\n\n                                     xxxxxxxxxxxxxxxx                                       \n\n\n\n                                                          xxxxxxxxxxxxxxx\n\n                                xxxxxxxxx\n\n\n\n                                                          xxxxxxxxxxxxxxx\n\n                                xxxxxxxxx\n        \nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n";

game = new Game(20, level);

game.run();
